{"version":3,"sources":["Doc.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Doc","state","fetch","concat","this","props","uri","response","json","setState","data","Array","isArray","IMG","LEG","TICO","TITR","replace","react_default","a","createElement","className","href","target","src","img","title","Component","docs","App","map","d","src_Doc","key","renderDocs","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAsDeA,6MAhCbC,MAAe,sNAEUC,MAAK,GAAAC,OAtBjB,0CAsBiB,SAAAA,OAAkBC,KAAKC,MAAMC,IAA7B,wBAAtBC,kBACaA,EAASC,cAAtBA,SACNJ,KAAKK,SAAS,CAAEC,KAAMF,kIAEpBE,GACF,OAAIC,MAAMC,QAAQF,EAAKG,KAzBZ,qDA0BOH,EAAKG,IAAI,GAEpBH,EAAKG,kCAERH,GACJ,OAAQA,EAAKI,KAAOJ,EAAKK,MAAQL,EAAKM,MACnCC,QAAQ,OAAQ,IAChBA,QAAQ,MAAO,uCAGlB,OAAKb,KAAKH,MAAMS,KAIdQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,KAAGE,KA1CI,qCA0CWlB,KAAKC,MAAMC,IAAKiB,OAAO,UACvCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQG,IAAKpB,KAAKqB,IAAIrB,KAAKH,MAAMS,QAChDQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQjB,KAAKsB,MAAMtB,KAAKH,MAAMS,SAN1CQ,EAAAC,EAAAC,cAAA,mBApBKO,aCjBZC,EAAO,CACX,sBACA,sBACA,sBACA,uBACA,6BACA,uBACA,qBACA,sBACA,sBACA,sBACA,sBACA,sBACA,4BACA,4BACA,sBACA,wBACA,sBACA,sBACA,4BACA,sBACA,sBACA,sBACA,qBACA,uBAuBaC,uLAlBX,OAAOD,EAAKE,IAAI,SAAAC,GAAC,OAAIb,EAAAC,EAAAC,cAACY,EAAD,CAAKC,IAAKF,EAAGzB,IAAKyB,uCAGvC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,WAASC,UAAU,QAAQjB,KAAK8B,cAChChB,EAAAC,EAAAC,cAAA,0BACY,IACVF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,8BAAR,6CAXQK,aCnBEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3cebc9c2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst apiUrl = \"https://rap2hpoutre.github.io/pop-noel/\";\nconst popUrl = \"http://pop.culture.gouv.fr/notice/\";\nconst imgUrl = \"https://s3.eu-west-3.amazonaws.com/pop-phototeque/\";\n\ninterface Props {\n  uri: string;\n}\n\ninterface State {\n  data?: DocData;\n}\n\ninterface DocData {\n  IMG: [string] | string;\n  TICO: string;\n  TITR: string;\n  LEG: string;\n}\n\nclass Doc extends Component<Props> {\n  state: State = {};\n  async componentDidMount() {\n    const response = await fetch(`${apiUrl}docs/${this.props.uri}.json`);\n    const json = await response.json();\n    this.setState({ data: json });\n  }\n  img(data: DocData): string {\n    if (Array.isArray(data.IMG)) {\n      return imgUrl + data.IMG[0];\n    }\n    return data.IMG;\n  }\n  title(data: DocData): string {\n    return (data.LEG || data.TICO || data.TITR)\n      .replace(/\\/.*/, \"\")\n      .replace(\" : \", \"\\n\");\n  }\n  render() {\n    if (!this.state.data) {\n      return <div />;\n    }\n    return (\n      <div className=\"doc\">\n        <a href={popUrl + this.props.uri} target=\"_blank\">\n          <img className=\"frame\" src={this.img(this.state.data)} />\n          <div className=\"card\">{this.title(this.state.data)}</div>\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default Doc;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Doc from \"./Doc\";\n\nconst docs = [\n  \"joconde/07430003391\",\n  \"joconde/07350000494\",\n  \"joconde/5002E012518\",\n  \"memoire/AP0602T05982\",\n  \"memoire/IVR54_99172513NUCA\",\n  \"memoire/AP0602T04393\",\n  \"memoire/AP71L20602\",\n  \"joconde/00000100554\",\n  \"joconde/5002E009430\",\n  \"joconde/M0418002994\",\n  \"joconde/M0352003093\",\n  \"joconde/M0333012292\",\n  \"memoire/IVR94_20092A01074\",\n  \"memoire/IVR26_20037101092\",\n  \"joconde/00980000413\",\n  \"memoire/APNADAR011656\",\n  \"joconde/00000099832\",\n  \"joconde/50430001541\",\n  \"memoire/IVR11_20099500040\",\n  \"joconde/07760000924\",\n  \"memoire/AP62T000063\",\n  \"memoire/AP62T000066\",\n  \"memoire/APFSK50-09\",\n  \"joconde/M0432000514\"\n];\n\nclass App extends Component {\n  renderDocs() {\n    return docs.map(d => <Doc key={d} uri={d} />);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ðŸŽ„ Joyeux NoÃ«l ! ðŸŽ„</h1>\n        <section className=\"docs\">{this.renderDocs()}</section>\n        <div>\n          DonnÃ©es :{\" \"}\n          <a href=\"http://pop.culture.gouv.fr\">\n            Plateforme Ouverte du Patrimoine\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}